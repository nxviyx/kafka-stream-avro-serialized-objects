/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7052157042805012658L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"employee_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"employee_first_name\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"employee_last_name\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"employee_join_date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"employee_blood_group\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"default\":\"None\"},{\"name\":\"employee_position\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"employee_email\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"default\":\"None\"},{\"name\":\"employee_phone\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"default\":\"None\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employee> ENCODER =
      new BinaryMessageEncoder<Employee>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employee> DECODER =
      new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Employee> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Employee to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Employee from a ByteBuffer. */
  public static Employee fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String employee_id;
   private java.lang.String employee_first_name;
   private java.lang.String employee_last_name;
   private java.lang.String employee_join_date;
   private java.lang.String employee_blood_group;
   private java.lang.String employee_position;
   private java.lang.String employee_email;
   private java.lang.String employee_phone;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employee() {}

  /**
   * All-args constructor.
   * @param employee_id The new value for employee_id
   * @param employee_first_name The new value for employee_first_name
   * @param employee_last_name The new value for employee_last_name
   * @param employee_join_date The new value for employee_join_date
   * @param employee_blood_group The new value for employee_blood_group
   * @param employee_position The new value for employee_position
   * @param employee_email The new value for employee_email
   * @param employee_phone The new value for employee_phone
   */
  public Employee(java.lang.String employee_id, java.lang.String employee_first_name, java.lang.String employee_last_name, java.lang.String employee_join_date, java.lang.String employee_blood_group, java.lang.String employee_position, java.lang.String employee_email, java.lang.String employee_phone) {
    this.employee_id = employee_id;
    this.employee_first_name = employee_first_name;
    this.employee_last_name = employee_last_name;
    this.employee_join_date = employee_join_date;
    this.employee_blood_group = employee_blood_group;
    this.employee_position = employee_position;
    this.employee_email = employee_email;
    this.employee_phone = employee_phone;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return employee_id;
    case 1: return employee_first_name;
    case 2: return employee_last_name;
    case 3: return employee_join_date;
    case 4: return employee_blood_group;
    case 5: return employee_position;
    case 6: return employee_email;
    case 7: return employee_phone;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: employee_id = (java.lang.String)value$; break;
    case 1: employee_first_name = (java.lang.String)value$; break;
    case 2: employee_last_name = (java.lang.String)value$; break;
    case 3: employee_join_date = (java.lang.String)value$; break;
    case 4: employee_blood_group = (java.lang.String)value$; break;
    case 5: employee_position = (java.lang.String)value$; break;
    case 6: employee_email = (java.lang.String)value$; break;
    case 7: employee_phone = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'employee_id' field.
   * @return The value of the 'employee_id' field.
   */
  public java.lang.String getEmployeeId() {
    return employee_id;
  }


  /**
   * Gets the value of the 'employee_first_name' field.
   * @return The value of the 'employee_first_name' field.
   */
  public java.lang.String getEmployeeFirstName() {
    return employee_first_name;
  }


  /**
   * Gets the value of the 'employee_last_name' field.
   * @return The value of the 'employee_last_name' field.
   */
  public java.lang.String getEmployeeLastName() {
    return employee_last_name;
  }


  /**
   * Gets the value of the 'employee_join_date' field.
   * @return The value of the 'employee_join_date' field.
   */
  public java.lang.String getEmployeeJoinDate() {
    return employee_join_date;
  }


  /**
   * Gets the value of the 'employee_blood_group' field.
   * @return The value of the 'employee_blood_group' field.
   */
  public java.lang.String getEmployeeBloodGroup() {
    return employee_blood_group;
  }


  /**
   * Gets the value of the 'employee_position' field.
   * @return The value of the 'employee_position' field.
   */
  public java.lang.String getEmployeePosition() {
    return employee_position;
  }


  /**
   * Gets the value of the 'employee_email' field.
   * @return The value of the 'employee_email' field.
   */
  public java.lang.String getEmployeeEmail() {
    return employee_email;
  }


  /**
   * Gets the value of the 'employee_phone' field.
   * @return The value of the 'employee_phone' field.
   */
  public java.lang.String getEmployeePhone() {
    return employee_phone;
  }


  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static com.example.Employee.Builder newBuilder() {
    return new com.example.Employee.Builder();
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.example.Employee.Builder newBuilder(com.example.Employee.Builder other) {
    return new com.example.Employee.Builder(other);
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.example.Employee.Builder newBuilder(com.example.Employee other) {
    return new com.example.Employee.Builder(other);
  }

  /**
   * RecordBuilder for Employee instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private java.lang.String employee_id;
    private java.lang.String employee_first_name;
    private java.lang.String employee_last_name;
    private java.lang.String employee_join_date;
    private java.lang.String employee_blood_group;
    private java.lang.String employee_position;
    private java.lang.String employee_email;
    private java.lang.String employee_phone;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.employee_id)) {
        this.employee_id = data().deepCopy(fields()[0].schema(), other.employee_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.employee_first_name)) {
        this.employee_first_name = data().deepCopy(fields()[1].schema(), other.employee_first_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.employee_last_name)) {
        this.employee_last_name = data().deepCopy(fields()[2].schema(), other.employee_last_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.employee_join_date)) {
        this.employee_join_date = data().deepCopy(fields()[3].schema(), other.employee_join_date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.employee_blood_group)) {
        this.employee_blood_group = data().deepCopy(fields()[4].schema(), other.employee_blood_group);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.employee_position)) {
        this.employee_position = data().deepCopy(fields()[5].schema(), other.employee_position);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.employee_email)) {
        this.employee_email = data().deepCopy(fields()[6].schema(), other.employee_email);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.employee_phone)) {
        this.employee_phone = data().deepCopy(fields()[7].schema(), other.employee_phone);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.Employee other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.employee_id)) {
        this.employee_id = data().deepCopy(fields()[0].schema(), other.employee_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.employee_first_name)) {
        this.employee_first_name = data().deepCopy(fields()[1].schema(), other.employee_first_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.employee_last_name)) {
        this.employee_last_name = data().deepCopy(fields()[2].schema(), other.employee_last_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.employee_join_date)) {
        this.employee_join_date = data().deepCopy(fields()[3].schema(), other.employee_join_date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.employee_blood_group)) {
        this.employee_blood_group = data().deepCopy(fields()[4].schema(), other.employee_blood_group);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.employee_position)) {
        this.employee_position = data().deepCopy(fields()[5].schema(), other.employee_position);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.employee_email)) {
        this.employee_email = data().deepCopy(fields()[6].schema(), other.employee_email);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.employee_phone)) {
        this.employee_phone = data().deepCopy(fields()[7].schema(), other.employee_phone);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'employee_id' field.
      * @return The value.
      */
    public java.lang.String getEmployeeId() {
      return employee_id;
    }

    /**
      * Sets the value of the 'employee_id' field.
      * @param value The value of 'employee_id'.
      * @return This builder.
      */
    public com.example.Employee.Builder setEmployeeId(java.lang.String value) {
      validate(fields()[0], value);
      this.employee_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'employee_id' field has been set.
      * @return True if the 'employee_id' field has been set, false otherwise.
      */
    public boolean hasEmployeeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'employee_id' field.
      * @return This builder.
      */
    public com.example.Employee.Builder clearEmployeeId() {
      employee_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'employee_first_name' field.
      * @return The value.
      */
    public java.lang.String getEmployeeFirstName() {
      return employee_first_name;
    }

    /**
      * Sets the value of the 'employee_first_name' field.
      * @param value The value of 'employee_first_name'.
      * @return This builder.
      */
    public com.example.Employee.Builder setEmployeeFirstName(java.lang.String value) {
      validate(fields()[1], value);
      this.employee_first_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'employee_first_name' field has been set.
      * @return True if the 'employee_first_name' field has been set, false otherwise.
      */
    public boolean hasEmployeeFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'employee_first_name' field.
      * @return This builder.
      */
    public com.example.Employee.Builder clearEmployeeFirstName() {
      employee_first_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'employee_last_name' field.
      * @return The value.
      */
    public java.lang.String getEmployeeLastName() {
      return employee_last_name;
    }

    /**
      * Sets the value of the 'employee_last_name' field.
      * @param value The value of 'employee_last_name'.
      * @return This builder.
      */
    public com.example.Employee.Builder setEmployeeLastName(java.lang.String value) {
      validate(fields()[2], value);
      this.employee_last_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'employee_last_name' field has been set.
      * @return True if the 'employee_last_name' field has been set, false otherwise.
      */
    public boolean hasEmployeeLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'employee_last_name' field.
      * @return This builder.
      */
    public com.example.Employee.Builder clearEmployeeLastName() {
      employee_last_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'employee_join_date' field.
      * @return The value.
      */
    public java.lang.String getEmployeeJoinDate() {
      return employee_join_date;
    }

    /**
      * Sets the value of the 'employee_join_date' field.
      * @param value The value of 'employee_join_date'.
      * @return This builder.
      */
    public com.example.Employee.Builder setEmployeeJoinDate(java.lang.String value) {
      validate(fields()[3], value);
      this.employee_join_date = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'employee_join_date' field has been set.
      * @return True if the 'employee_join_date' field has been set, false otherwise.
      */
    public boolean hasEmployeeJoinDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'employee_join_date' field.
      * @return This builder.
      */
    public com.example.Employee.Builder clearEmployeeJoinDate() {
      employee_join_date = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'employee_blood_group' field.
      * @return The value.
      */
    public java.lang.String getEmployeeBloodGroup() {
      return employee_blood_group;
    }

    /**
      * Sets the value of the 'employee_blood_group' field.
      * @param value The value of 'employee_blood_group'.
      * @return This builder.
      */
    public com.example.Employee.Builder setEmployeeBloodGroup(java.lang.String value) {
      validate(fields()[4], value);
      this.employee_blood_group = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'employee_blood_group' field has been set.
      * @return True if the 'employee_blood_group' field has been set, false otherwise.
      */
    public boolean hasEmployeeBloodGroup() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'employee_blood_group' field.
      * @return This builder.
      */
    public com.example.Employee.Builder clearEmployeeBloodGroup() {
      employee_blood_group = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'employee_position' field.
      * @return The value.
      */
    public java.lang.String getEmployeePosition() {
      return employee_position;
    }

    /**
      * Sets the value of the 'employee_position' field.
      * @param value The value of 'employee_position'.
      * @return This builder.
      */
    public com.example.Employee.Builder setEmployeePosition(java.lang.String value) {
      validate(fields()[5], value);
      this.employee_position = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'employee_position' field has been set.
      * @return True if the 'employee_position' field has been set, false otherwise.
      */
    public boolean hasEmployeePosition() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'employee_position' field.
      * @return This builder.
      */
    public com.example.Employee.Builder clearEmployeePosition() {
      employee_position = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'employee_email' field.
      * @return The value.
      */
    public java.lang.String getEmployeeEmail() {
      return employee_email;
    }

    /**
      * Sets the value of the 'employee_email' field.
      * @param value The value of 'employee_email'.
      * @return This builder.
      */
    public com.example.Employee.Builder setEmployeeEmail(java.lang.String value) {
      validate(fields()[6], value);
      this.employee_email = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'employee_email' field has been set.
      * @return True if the 'employee_email' field has been set, false otherwise.
      */
    public boolean hasEmployeeEmail() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'employee_email' field.
      * @return This builder.
      */
    public com.example.Employee.Builder clearEmployeeEmail() {
      employee_email = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'employee_phone' field.
      * @return The value.
      */
    public java.lang.String getEmployeePhone() {
      return employee_phone;
    }

    /**
      * Sets the value of the 'employee_phone' field.
      * @param value The value of 'employee_phone'.
      * @return This builder.
      */
    public com.example.Employee.Builder setEmployeePhone(java.lang.String value) {
      validate(fields()[7], value);
      this.employee_phone = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'employee_phone' field has been set.
      * @return True if the 'employee_phone' field has been set, false otherwise.
      */
    public boolean hasEmployeePhone() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'employee_phone' field.
      * @return This builder.
      */
    public com.example.Employee.Builder clearEmployeePhone() {
      employee_phone = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employee build() {
      try {
        Employee record = new Employee();
        record.employee_id = fieldSetFlags()[0] ? this.employee_id : (java.lang.String) defaultValue(fields()[0]);
        record.employee_first_name = fieldSetFlags()[1] ? this.employee_first_name : (java.lang.String) defaultValue(fields()[1]);
        record.employee_last_name = fieldSetFlags()[2] ? this.employee_last_name : (java.lang.String) defaultValue(fields()[2]);
        record.employee_join_date = fieldSetFlags()[3] ? this.employee_join_date : (java.lang.String) defaultValue(fields()[3]);
        record.employee_blood_group = fieldSetFlags()[4] ? this.employee_blood_group : (java.lang.String) defaultValue(fields()[4]);
        record.employee_position = fieldSetFlags()[5] ? this.employee_position : (java.lang.String) defaultValue(fields()[5]);
        record.employee_email = fieldSetFlags()[6] ? this.employee_email : (java.lang.String) defaultValue(fields()[6]);
        record.employee_phone = fieldSetFlags()[7] ? this.employee_phone : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employee>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employee>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employee>
    READER$ = (org.apache.avro.io.DatumReader<Employee>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
